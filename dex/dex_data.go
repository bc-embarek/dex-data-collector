package dex

import (
	"context"
	"github.com/deckarep/golang-set"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient/gethclient"
	"log"
	"math"
	"math/big"
	"strings"
)

var (
	sender           common.Address
	contractAddress  common.Address
	contractBytecode string
	contractABI      abi.ABI
)

func init() {
	sender = common.HexToAddress("0x1000000000000000000000000000000000000001")
	contractAddress = common.HexToAddress("0x1000000000000000000000000000000000000002")
	contractBytecode = ""
	abiStr := "[{\"inputs\": [{\"internalType\": \"address\", \"name\": \"_factory\", \"type\": \"address\"}, {\"internalType\": \"uint256\", \"name\": \"start\", \"type\": \"uint256\"}, {\"internalType\": \"uint256\", \"name\": \"size\", \"type\": \"uint256\"}], \"name\": \"getPoolAddresses\", \"outputs\": [{\"components\": [{\"internalType\": \"address\", \"name\": \"addr\", \"type\": \"address\"}, {\"internalType\": \"address\", \"name\": \"token0\", \"type\": \"address\"}, {\"internalType\": \"address\", \"name\": \"token1\", \"type\": \"address\"}], \"internalType\": \"struct DataCollector.Pool[]\", \"name\": \"\", \"type\": \"tuple[]\"}], \"stateMutability\": \"view\", \"type\": \"function\"}, {\"inputs\": [{\"internalType\": \"address[]\", \"name\": \"_tokens\", \"type\": \"address[]\"}], \"name\": \"getTokenInfo\", \"outputs\": [{\"components\": [{\"internalType\": \"address\", \"name\": \"addr\", \"type\": \"address\"}, {\"internalType\": \"string\", \"name\": \"name\", \"type\": \"string\"}, {\"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\"}, {\"internalType\": \"uint8\", \"name\": \"decimal\", \"type\": \"uint8\"}], \"internalType\": \"struct DataCollector.Token[]\", \"name\": \"\", \"type\": \"tuple[]\"}], \"stateMutability\": \"view\", \"type\": \"function\"}]"
	contractABI, _ = abi.JSON(strings.NewReader(abiStr))
}

type Token struct {
	Address  common.Address
	Name     string
	Symbol   string
	Decimals uint8
}

type Pair struct {
	Address       common.Address
	Token0Address common.Address
	Token1Address common.Address
	Token0        *Token
	Token1        *Token
}

type Collector struct {
	GethClient *gethclient.Client
}

func (c *Collector) ethCall(callData []byte) ([]byte, error) {
	msg := ethereum.CallMsg{
		From: sender,
		To:   &contractAddress,
		Data: callData,
	}
	overrides := make(map[common.Address]gethclient.OverrideAccount, 2)
	overrides[sender] = gethclient.OverrideAccount{Balance: big.NewInt(int64(math.Pow(10, 18)))}
	overrides[contractAddress] = gethclient.OverrideAccount{Code: common.FromHex(contractBytecode)}
	return c.GethClient.CallContract(context.Background(), msg, nil, &overrides)
}

func (c *Collector) getPairs(factory common.Address, start int, pageSize int) []Pair {
	callData, err := contractABI.Pack("getPoolAddresses", factory, big.NewInt(int64(start)), big.NewInt(int64(pageSize)))
	if err != nil {
		log.Fatal("pack call data for getPoolAddresses error ", err)
	}
	results, err := c.ethCall(callData)
	if err != nil {
		log.Fatal("failed when eth_call: ", err)
	}
	var pairs []Pair
	if err := contractABI.UnpackIntoInterface(&pairs, "getPoolAddresses", results); err != nil {
		log.Fatal("unpack results error")
	}
	log.Printf("get %d pairs with start: %d", len(pairs), start)
	return pairs
}

func (c *Collector) getTokens(tokens []common.Address) []Token {
	callData, err := contractABI.Pack("getTokenInfo", tokens)
	if err != nil {
		log.Fatal("pack call data for getTokenInfo error ", err)
	}
	var tokenRes []Token
	if results, err := c.ethCall(callData); err != nil {
		if len(tokens) > 1 {
			tokenRes = append(tokenRes, c.getTokens(tokens[:len(tokens)/2])...)
			tokenRes = append(tokenRes, c.getTokens(tokens[len(tokens)/2:])...)
		}
	} else {
		if err = contractABI.UnpackIntoInterface(&tokenRes, "getTokenInfo", results); err != nil {
			log.Fatal("unpack token results error ", err)
		}
		log.Printf("get %d tokens", len(tokenRes))
	}
	return tokenRes
}

func (c *Collector) GetAllPairs(factory common.Address, tokenInfo bool) []Pair {
	// get all pairs
	start := 0
	pageSize := 1000
	pairs := c.getPairs(factory, start, pageSize)
	allPairs := pairs

	for len(pairs) == pageSize {
		start += pageSize
		pairs = c.getPairs(factory, start, pageSize)
		allPairs = append(allPairs, pairs...)
	}

	// get all tokenAddrs
	if tokenInfo {
		tokenSet := mapset.NewSet()
		for _, pair := range allPairs {
			tokenSet.Add(pair.Token0Address)
			tokenSet.Add(pair.Token1Address)
		}
		var tokenAddrs []common.Address
		for token := range tokenSet.Iterator().C {
			tokenAddrs = append(tokenAddrs, token.(common.Address))
		}
		tokens := c.getTokens(tokenAddrs)
		tokenMap := make(map[string]Token)
		for _, token := range tokens {
			tokenMap[token.Address.Hex()] = token
		}

		for idx, pair := range allPairs {
			if token, ok := tokenMap[pair.Token0Address.Hex()]; ok {
				pair.Token0 = &token
			}
			if token, ok := tokenMap[pair.Token1Address.Hex()]; ok {
				pair.Token1 = &token
			}
			allPairs[idx] = pair
		}
	}
	return allPairs
}
